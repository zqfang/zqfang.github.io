<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Algorithm and data structure - Category - My Computational Genomic Playground</title><link>https://zqfang.github.io/categories/algorithm-and-data-structure/</link><description>Algorithm and data structure - Category - My Computational Genomic Playground</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 12 Feb 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://zqfang.github.io/categories/algorithm-and-data-structure/" rel="self" type="application/rss+xml"/><item><title>Dijkstra</title><link>https://zqfang.github.io/2020-02-12-cs-dijkstra/</link><pubDate>Wed, 12 Feb 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-02-12-cs-dijkstra/</guid><description>给出一个有向图，一个起点，一个终点，问起点到终点的最短路径。 Dijkstra dijkstra 算法可以同时求 起点到所有节点的最短路</description></item><item><title>Prim</title><link>https://zqfang.github.io/2020-02-11-cs-prim/</link><pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-02-11-cs-prim/</guid><description>最小生成树是所有节点的最小连通子图， 即：以最小的成本（边的权值）将图中所有节点链接到一起。 图中有n个</description></item><item><title>Graph</title><link>https://zqfang.github.io/2020-02-09-cs-graph/</link><pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-02-09-cs-graph/</guid><description><![CDATA[Graphs Some data structures to keep in my mind. BinaryHeap: Complete binary tree MaxHeap: Parent &gt; Both Children IndexMaxHeap MinHeap: Parent &lt; Both Children IndexMinHeap Priority queue (MaxHeap) BinarySearchTree Not always complete binary tree Value: leftChild &lt; Parent &lt; rightChild DenseGraph SparseGraph Code snippets are taken from Play with Algorithm]]></description></item><item><title>Priority Queque</title><link>https://zqfang.github.io/2020-02-10-cs-priorityqueue/</link><pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-02-10-cs-priorityqueue/</guid><description>min-heap 1 2 3 4 5 6 7 8 import heapq # create a priorty queque in python, and heapq will ensure the list maintains the heap property. priority_queue = [] # add element. The smallest element will always be at the root, i.e., priority_queue[0]. heapq.heappush(priority_queue, (priority, item)) ## Use heapq.</description></item><item><title>Binary tree</title><link>https://zqfang.github.io/2020-02-08-cs-binarytree/</link><pubDate>Sat, 08 Feb 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-02-08-cs-binarytree/</guid><description><![CDATA[Binary trees Difference Some data structures to keep in my mind. BinaryHeap: Complete binary tree MaxHeap: Parent &gt; Both Children IndexMaxHeap MinHeap: Parent &lt; Both Children IndexMinHeap Priority queue (MaxHeap) BinarySearchTree Not always complete binary tree Value: leftChild &lt; Parent &lt; rightChild DenseGraph SparseGraph Code snippets are taken from Play]]></description></item><item><title>Sort</title><link>https://zqfang.github.io/2020-02-08-cs-sort/</link><pubDate>Sat, 08 Feb 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-02-08-cs-sort/</guid><description>Sort algorithms Code snippets are taken from Play with Algorithm Some algorithm to keep in my mind. selectionSort insertionSort mergeSort quickSort two way three way heapSort 1. insertionSort 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include &amp;lt;iostream&amp;gt;#include</description></item><item><title>What is Big O</title><link>https://zqfang.github.io/2020-02-01-cs-algo/</link><pubDate>Sat, 01 Feb 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-02-01-cs-algo/</guid><description>What on earth is Big O? Time complexity and space complexity Time complexity O(f(n)): number of commands need to execute. proportional to f(n). 表示运行算法所需要执行的指令数，和f(n)成正。 严格来</description></item></channel></rss>