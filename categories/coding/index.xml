<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Coding - Category - My Computational Genomic Playground</title><link>https://zqfang.github.io/categories/coding/</link><description>Coding - Category - My Computational Genomic Playground</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 10 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://zqfang.github.io/categories/coding/" rel="self" type="application/rss+xml"/><item><title>C++ Notes: Concurrency</title><link>https://zqfang.github.io/2020-07-10-cpp-threading/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-07-10-cpp-threading/</guid><description><![CDATA[Learn C++11 thread library. Code snippets from Concurrent Programming with C++11
Process vs. Threads Usage Summary A short summary of thread library in STL
 thread and async  1 2 3 4 5 6 7 8  /* thread */ std::thread t1(factorial, 6); // create a new thread std::this_thread::sleep_for(chrono::milliseconds(3)); chrono::steady_clock::time_point tp = chrono::steady_clock::now() + chrono::microseconds(4); std::this_thread::sleep_until(tp); /* async() */ std::future&lt;int&gt; fu = async(factorial, 6); // create a new thread   mutex  1 2 3 4 5 6 7  /* Mutex */ std::mutex mu; std::lock_guard&lt;mutex&gt; locker(mu); std::unique_lock&lt;mutex&gt; ulocker(mu); ulocker.]]></description></item><item><title>Pointer in UnSafe Swift</title><link>https://zqfang.github.io/2020-06-03-swift-unsafe-pointer/</link><pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-06-03-swift-unsafe-pointer/</guid><description><![CDATA[Pointers Unsafe Swift pointers use a predictable naming scheme:
Unsafe [Mutable][Raw][Buffer]Pointer[&lt;T&gt;]
Explain:
Pointers are just memory addresses.
Direct memory access is Unsafe.
Mutable means you can write to it.
Raw means it points to a blob of bytes.
Buffer means that is works like a collection.
Generic [&lt;T&gt;] pointers are typed.]]></description></item><item><title>Swift Cheat Sheet</title><link>https://zqfang.github.io/2020-05-30-swift-cheat-sheet/</link><pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-05-30-swift-cheat-sheet/</guid><description>Swift Cheat Sheet Stolen from iwasrobbed.
I simplify it and add some more.
It&amp;rsquo;s a high level and a quick reference to Swift. The purpose of this cheat sheet is to teach myself and get answers within 10s.
Table of Contents Code Document Data Types Operators Operator Overloading Declaring Classes Declarations Lazy Property Property Observer Literals Functions Constants and Variables Naming Conventions Closures Generics Control Statements Extension Protocol Protocol Extension Error Handling Passing Information User Defaults Common Patterns Unicode Support File IO Code Documentation Two ways of commenting:</description></item><item><title>C++ Notes: STL</title><link>https://zqfang.github.io/2020-02-10-cpp-stl/</link><pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-02-10-cpp-stl/</guid><description>Just some advanced C/C++ code snippets to keep in mind. Header naming Never used some header file name with std. Sometimes, compiler could not find the std headers.!!! FileIO The simplest example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include &amp;lt;iostream&amp;gt;#include</description></item><item><title>C++ Notes: Basics</title><link>https://zqfang.github.io/2020-02-10-cpp-basics/</link><pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-02-10-cpp-basics/</guid><description>C++ Notes Just some C/C++ code snippets to keep in mind. C/C++ is tremendous complicated, but it&amp;rsquo;s still the most powerful programming language.
Table of Contents char to Int Pointer Pointer and Smart Pointer Array as Argument Operator that can&amp;rsquo;t be overloaded Object Instantization Object Relationship Virtual Function and Ploymorphism Friend Const Constexpr Extern and static Char to Int 1.</description></item><item><title>C++ Notes: Return Pointer or Reference</title><link>https://zqfang.github.io/2020-02-10-cpp-pointer/</link><pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-02-10-cpp-pointer/</guid><description>Explaination A pointer or reference could not be return if they point/refer to a local variable stored in stack inside a function (local variable stored in stack will be destoried automatically when return, and the pointer become wild)
Situations when a function could return pointer or reference
variable defined outside a function scope global variable local static variable local variable stored in heap ( new opterator, malloc()) Other process could not access the memory of variable stored in heap until it is released.</description></item></channel></rss>