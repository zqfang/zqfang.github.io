<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>My Computational Genomic Playground</title><link>https://zqfang.github.io/</link><description>My Computational Genomic Playground</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 30 May 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://zqfang.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Pointer in UnSafe Swift</title><link>https://zqfang.github.io/2020-06-03-code-unsafe-pointer-swift/</link><pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-06-03-code-unsafe-pointer-swift/</guid><description><![CDATA[Pointers Unsafe Swift pointers use a predictable naming scheme:
Unsafe [Mutable][Raw][Buffer]Pointer[&lt;T&gt;]
Explain:
Pointers are just memory addresses.
Direct memory access is Unsafe.
Mutable means you can write to it.
Raw means it points to a blob of bytes.
Buffer means that is works like a collection.
Generic [&lt;T&gt;] pointers are typed.]]></description></item><item><title>Swift Cheat Sheet</title><link>https://zqfang.github.io/2020-05-30-code-swift-cheat-sheet/</link><pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-05-30-code-swift-cheat-sheet/</guid><description>Swift Cheat Sheet Stolen from iwasrobbed.
I simplify it and add some more.
It&amp;rsquo;s a high level and a quick reference to Swift. The purpose of this cheat sheet is to teach myself and get answers within 10s.
Table of Contents Code Document Data Types Operators Operator Overloading Declaring Classes Declarations Lazy Property Property Observer Literals Functions Constants and Variables Naming Conventions Closures Generics Control Statements Extension Protocol Protocol Extension Error Handling Passing Information User Defaults Common Patterns Unicode Support File IO Code Documentation Two ways of commenting:</description></item><item><title>Boosting</title><link>https://zqfang.github.io/2020-05-05-ml-boosting/</link><pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-05-05-ml-boosting/</guid><description>提升（Boosting）方法： 通过改变训练样本的权重（概率分布），学习过个分类器，并将这些分类器线性</description></item><item><title>Hidden Markov Model (HMM)</title><link>https://zqfang.github.io/2020-05-03-ml-hmm/</link><pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-05-03-ml-hmm/</guid><description>隐马可夫模型（HMM）描述隐藏的马可夫链随机生成观测序列的过程，属于生成模型。 HMM在语音识别、自然</description></item><item><title>Latent semantic analysis (LSA)</title><link>https://zqfang.github.io/2020-04-30-ml-lsa/</link><pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-04-30-ml-lsa/</guid><description>潜在语义分析（LSA）是一种非监督学习方法，用于文本话题分析。其特点是通过矩阵分解发现文本于单词之间</description></item><item><title>Conditional random field (CRF)</title><link>https://zqfang.github.io/2020-04-29-ml-crf/</link><pubDate>Wed, 29 Apr 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-04-29-ml-crf/</guid><description>CRF条件随机场，可应用于标注问题 概率无向图模型Probabilistic undirected graphical model(Markov random field) 是一个可以由无向</description></item><item><title>Probability and P-value</title><link>https://zqfang.github.io/2020-04-29-stats-proba-pvalue/</link><pubDate>Wed, 29 Apr 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-04-29-stats-proba-pvalue/</guid><description>Probability and P-value 1. PDF (probability density function) PDF：概率密度函数（probability density function）, 连续型随机变量的概</description></item><item><title>Convert Seurat Robj to Scanpy h5ad</title><link>https://zqfang.github.io/2020-04-28-seurat2scanpy/</link><pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-04-28-seurat2scanpy/</guid><description>It costed me a lot of time to convert seurat objects to scanpy. It&amp;rsquo;s not a pleasant experience.
Finally, I solved it.
1. Install Seurat v3.0.2, or python kernel will always died!!! Don&amp;rsquo;t know why latest seurat not work.
2. Set the R version for rpy2 1 2 3 4 5 6 7 # user defined R installation import os # path to your libR.</description></item><item><title>GATK for inbred mouse is not good</title><link>https://zqfang.github.io/2020-03-10-gatk4-mm10-bundle/</link><pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-03-10-gatk4-mm10-bundle/</guid><description>GATK is design for human genetics, it works not so good on homogeneous inbred mouse.
But we could use bcftools instead.
One of my colleague who studies mouse genetics, said,
I tried the haplotype caller from GATK. But it seems that the haplotype caller is designed for heterogeneous genome like human than for mice.</description></item><item><title>C++ Notes</title><link>https://zqfang.github.io/2020-02-10-code-cpp-notes/</link><pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-02-10-code-cpp-notes/</guid><description>C++ Notes Just some C/C++ code snippets to keep in mind. C/C++ is tremendous complicated, but it&amp;rsquo;s still the most powerful programming language.
Table of Contents char to Int Pointer Return Reference/Pointer Array as Argument Operator that can&amp;rsquo;t be overloaded Object Instantization Object Relationship Virtual Function and Ploymorphism Const Friend Design Pattern Singleton Delegate Char to Int 1.</description></item></channel></rss>