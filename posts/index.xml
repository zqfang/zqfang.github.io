<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - My Computational Genomic Playground</title><link>https://zqfang.github.io/posts/</link><description>All Posts | My Computational Genomic Playground</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 19 Aug 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://zqfang.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>Deploy snakemake pipeline on HPC</title><link>https://zqfang.github.io/2020-08-19-hpc-snakemake/</link><pubDate>Wed, 19 Aug 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-08-19-hpc-snakemake/</guid><description>The best part of snakemake is allowed you to run your pipeline on HPC automatically. It save you a lot of time.
How to run snakemake on HPC there are two ways to configure
use --cluster: works on different HPC system, e.g. slurm, SGE. assign resource in params directive explicitly.</description></item><item><title>Fourier transform for biologist</title><link>https://zqfang.github.io/2020-08-01-dl-fourier/</link><pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-08-01-dl-fourier/</guid><description>A biologist&amp;rsquo;s way to learn Fourier transform Visual intuition in 3D This is an awesome introduction Fourier Series Discrete Fourier transform (DFT) A Fourier series is a periodic function composed of harmonically related sinusoids, combined by a weighted summation. 周期性函数可以变换为正</description></item><item><title>NLP: Parse trees</title><link>https://zqfang.github.io/2020-08-01-nlp-constituency-and-depenency-parsing/</link><pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-08-01-nlp-constituency-and-depenency-parsing/</guid><description>Structure of Sentences: Parse trees Shallow parsing identifies phrasal units, the task of identifying the relationship between them is called parsing.
Parse trees indicate how different grammatical units in a sentence are related hierachically. (aslo refer to constituent parse, chart-based )
dependency parsing: directed graph (graph-based)</description></item><item><title>NLP: RNN and Self-attention</title><link>https://zqfang.github.io/2020-07-31-nlp-rnn/</link><pubDate>Fri, 31 Jul 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-07-31-nlp-rnn/</guid><description>Backpropagation Through Time Long Short-Term Memory Delete information from the context that is no longer needed: Forget Gate f $$ f_t = \sigma (U_f h_{t-1} + W_f X_t) $$
$$ k_t = c_{t-1} \odot f_t $$
Compute the actual information we need to extract from the previous hidden stat and current inputs $$ g_t = \tanh (U_g h_{t-1} + W_g x_t) $$</description></item><item><title>Graph Neural Network</title><link>https://zqfang.github.io/2020-07-26-dl-gnn/</link><pubDate>Sun, 26 Jul 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-07-26-dl-gnn/</guid><description>More about Graph Neural Network
Algebra presentation of Graphs 1. Adjacency matrix $$ A_{i j}= \begin{cases} 1 &amp;amp; \text { if }\lbrace v_{i}, v_{j}\rbrace \in E \text { and } i \neq j \cr 0 &amp;amp; \text { otherwise } \end{cases} $$
2. Degree matrix: D is a diagonal matrix, where $$ D_{ii} = d(v_i) $$</description></item><item><title>Geometric Deep Learning</title><link>https://zqfang.github.io/2020-07-25-dl-geometric/</link><pubDate>Sat, 25 Jul 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-07-25-dl-geometric/</guid><description>Introduction of Graph Neural Networks
Data Eculidean Structure Data: image, video, voice &amp;hellip; easy to find adjacent neighbors easy to define distance Non-Eculidean data: Graph, Manifold hard to define adjacent neighbors or the numbers of adjacent nodes varies. means hard to define distance, convolution &amp;hellip; Embed (project) Non-Eculidean Data into Eculidean Space using geometric deep learning</description></item><item><title>C++ Notes: CUDA</title><link>https://zqfang.github.io/2020-07-28-cpp-cuda/</link><pubDate>Sat, 11 Jul 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-07-28-cpp-cuda/</guid><description>A Cuda/C++ starter cheatsheet Harward and software Thread block and grid are logical threads, make programming easy. In hardware, each GPU made of lots of streaming multiprocessor(hardware), which have lots of threads. Concepts kernel: the code (function) run on GPU one kernel, only have one grid, grid have blocks, block</description></item><item><title>C++ Notes: Concurrency</title><link>https://zqfang.github.io/2020-07-10-cpp-threading/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-07-10-cpp-threading/</guid><description><![CDATA[Learn C++11 thread library. Code snippets from Concurrent Programming with C++11
Process vs. Threads Usage Summary A short summary of thread library in STL
 thread and async  1 2 3 4 5 6 7 8  /* thread */ std::thread t1(factorial, 6); // create a new thread std::this_thread::sleep_for(chrono::milliseconds(3)); chrono::steady_clock::time_point tp = chrono::steady_clock::now() + chrono::microseconds(4); std::this_thread::sleep_until(tp); /* async() */ std::future&lt;int&gt; fu = async(factorial, 6); // create a new thread   mutex  1 2 3 4 5 6 7  /* Mutex */ std::mutex mu; std::lock_guard&lt;mutex&gt; locker(mu); std::unique_lock&lt;mutex&gt; ulocker(mu); ulocker.]]></description></item><item><title>ANOVA</title><link>https://zqfang.github.io/2020-06-30-stats-anova/</link><pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-06-30-stats-anova/</guid><description>one-way ANOVA from scratch Calculate the Sum of Squares Total (SST): $$ SS_{total} = \sum_{j=1}^k \sum_{i=1}^l (X_{ij} - \bar{X})^2 $$
Calculate the Sum of Squares Within Groups (SSW): $$ SS_{within} = \sum_{j=1}^k \sum_{i=1}^l (X_{ij} - \bar{X_j})^2 $$
Calculate the Sum of Squares Between Groups (SSB): $$ SS_{between} = \sum_{j=1}^k n_j ( \bar X_{j} - \bar{X}) ^2 $$</description></item><item><title>Survival Analysis</title><link>https://zqfang.github.io/2020-06-22-stats-survival-analysis/</link><pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-06-22-stats-survival-analysis/</guid><description><![CDATA[Censoring Censoring
 Surivial without Censoring Surivial with Censoring  Kaplan Meier Curve More individual in each group, better sepration of the group, better p-value
 Takes censoring into account Estimates probabilitu of &ldquo;survival&rdquo; on a given day Conditional probability of surviving on a given day:  $$ \frac {N_{ \text{&ldquo;alive&rdquo; day before}} - N_{ \text{&ldquo;dying&rdquo; nextday}}} { \text{&ldquo;alive&rdquo; day before}} $$]]></description></item></channel></rss>