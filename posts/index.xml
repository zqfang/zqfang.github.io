<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - My Computational Genomic Playground</title><link>https://zqfang.github.io/posts/</link><description>All Posts | My Computational Genomic Playground</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 30 Jun 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://zqfang.github.io/posts/" rel="self" type="application/rss+xml"/><item><title>ANOVA</title><link>https://zqfang.github.io/2020-06-30-stats-anova/</link><pubDate>Tue, 30 Jun 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-06-30-stats-anova/</guid><description>one-way ANOVA from scratch Calculate the Sum of Squares Total (SST): $$ SS_{total} = \sum_{j=1}^k \sum_{i=1}^l (X_{ij} - \bar{X})^2 $$
Calculate the Sum of Squares Within Groups (SSW): $$ SS_{within} = \sum_{j=1}^k \sum_{i=1}^l (X_{ij} - \bar{X_j})^2 $$
Calculate the Sum of Squares Between Groups (SSB): $$ SS_{between} = \sum_{j=1}^k n_j ( \bar X_{j} - \bar{X}) ^2 $$</description></item><item><title>Survival Analysis</title><link>https://zqfang.github.io/2020-06-22-stats-survival-analysis/</link><pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-06-22-stats-survival-analysis/</guid><description><![CDATA[Censoring Censoring
 Surivial without Censoring Surivial with Censoring  Kaplan Meier Curve More individual in each group, better sepration of the group, better p-value
 Takes censoring into account Estimates probabilitu of &ldquo;survival&rdquo; on a given day Conditional probability of surviving on a given day:  $$ \frac {N_{ \text{&ldquo;alive&rdquo; day before}} - N_{ \text{&ldquo;dying&rdquo; nextday}}} { \text{&ldquo;alive&rdquo; day before}} $$]]></description></item><item><title>NLP concepts</title><link>https://zqfang.github.io/2020-06-20-nlp-basics/</link><pubDate>Sat, 20 Jun 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-06-20-nlp-basics/</guid><description>Basic concepts in NLP
Traditional NLP Count-based Representation one-hot representation
BoW: Bag of words Bow describes the occurrence of words within a document. including
A Vocabulary of known words A measure of the presence of known words, e.g. count TF or TF-IDF representation: Term Frequency Inverse Document Frequency</description></item><item><title>Power, Effect size, Sample size</title><link>https://zqfang.github.io/2020-06-14-stats-effectsize/</link><pubDate>Sun, 14 Jun 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-06-14-stats-effectsize/</guid><description>样本量、效应量、显著水平和统计功效的统计原理和计算 效应量通常用三种方式来衡量：标准均差（standa</description></item><item><title>Quantile normalization</title><link>https://zqfang.github.io/2020-06-14-stats-quantile-normalization/</link><pubDate>Sun, 14 Jun 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-06-14-stats-quantile-normalization/</guid><description>Quantile normalization is frequently used in microarray data analysis. It was introduced as quantile standardization and then renamed as quantile normalization.
Quantile, quartile, percentile ??? Quantiles are just the lines that divide data into equally sized groups.
percentiles are just quantiles that divide the data into 100 equally sized groups</description></item><item><title>Multilevel (Hierachical) Models</title><link>https://zqfang.github.io/2020-06-13-stats-hierachial-models/</link><pubDate>Sat, 13 Jun 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-06-13-stats-hierachial-models/</guid><description>What&amp;rsquo;s Multilevel models, and how to deal with it What is multilevel model Multilevel model AKA: multilevel Models random-effects models hierarchical models variance-components models random-coefficient models mixed models Many kinds of data, including observational data collected in the human and biological sciences, have a hierarchical or clustered structure, or non-hierarchical</description></item><item><title>Markov Chain Mento Carlo (MCMC)</title><link>https://zqfang.github.io/2020-01-26-ml-montecarlo/</link><pubDate>Sat, 06 Jun 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-01-26-ml-montecarlo/</guid><description>蒙特卡罗方法，又称统计模拟方法(statistical simulation method), 通过概率模型的随机抽样进行进行近似数值计算</description></item><item><title>Singular Value Decomposition (SVD)</title><link>https://zqfang.github.io/2020-06-06-ml-svd/</link><pubDate>Sat, 06 Jun 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-06-06-ml-svd/</guid><description>奇异值分解(SVD)是一种矩阵因子分解方法，在线性代数中，被广泛应用。 奇异值分解也是一种矩阵近似的方</description></item><item><title>Pointer in UnSafe Swift</title><link>https://zqfang.github.io/2020-06-03-swift-unsafe-pointer/</link><pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-06-03-swift-unsafe-pointer/</guid><description><![CDATA[Pointers Unsafe Swift pointers use a predictable naming scheme:
Unsafe [Mutable][Raw][Buffer]Pointer[&lt;T&gt;]
Explain:
Pointers are just memory addresses.
Direct memory access is Unsafe.
Mutable means you can write to it.
Raw means it points to a blob of bytes.
Buffer means that is works like a collection.
Generic [&lt;T&gt;] pointers are typed.]]></description></item><item><title>Swift Cheat Sheet</title><link>https://zqfang.github.io/2020-05-30-swift-cheat-sheet/</link><pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-05-30-swift-cheat-sheet/</guid><description>Swift Cheat Sheet Stolen from iwasrobbed.
I simplify it and add some more.
It&amp;rsquo;s a high level and a quick reference to Swift. The purpose of this cheat sheet is to teach myself and get answers within 10s.
Table of Contents Code Document Data Types Operators Operator Overloading Declaring Classes Declarations Lazy Property Property Observer Literals Functions Constants and Variables Naming Conventions Closures Generics Control Statements Extension Protocol Protocol Extension Error Handling Passing Information User Defaults Common Patterns Unicode Support File IO Code Documentation Two ways of commenting:</description></item></channel></rss>