<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>C++ - Tag - My Computational Genomic Playground</title><link>https://zqfang.github.io/tags/c++/</link><description>C++ - Tag - My Computational Genomic Playground</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 11 Jul 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://zqfang.github.io/tags/c++/" rel="self" type="application/rss+xml"/><item><title>C++ Notes: CUDA</title><link>https://zqfang.github.io/2020-07-28-cpp-cuda/</link><pubDate>Sat, 11 Jul 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-07-28-cpp-cuda/</guid><description>A Cuda/C++ starter cheatsheet Harward and software Thread block and grid are logical threads, make programming easy. In hardware, each GPU made of lots of streaming multiprocessor(hardware), which have lots of threads. Concepts kernel: the code (function) run on GPU one kernel, only have one grid, grid have blocks, block</description></item><item><title>C++ Notes: Concurrency</title><link>https://zqfang.github.io/2020-07-10-cpp-threading/</link><pubDate>Fri, 10 Jul 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-07-10-cpp-threading/</guid><description><![CDATA[Learn C++11 thread library. Code snippets from Concurrent Programming with C++11
Process vs. Threads Usage Summary A short summary of thread library in STL
 thread and async  1 2 3 4 5 6 7 8  /* thread */ std::thread t1(factorial, 6); // create a new thread std::this_thread::sleep_for(chrono::milliseconds(3)); chrono::steady_clock::time_point tp = chrono::steady_clock::now() + chrono::microseconds(4); std::this_thread::sleep_until(tp); /* async() */ std::future&lt;int&gt; fu = async(factorial, 6); // create a new thread   mutex  1 2 3 4 5 6 7  /* Mutex */ std::mutex mu; std::lock_guard&lt;mutex&gt; locker(mu); std::unique_lock&lt;mutex&gt; ulocker(mu); ulocker.]]></description></item><item><title>C++ Notes: STL</title><link>https://zqfang.github.io/2020-02-10-cpp-stl/</link><pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-02-10-cpp-stl/</guid><description>Just some advanced C/C++ code snippets to keep in mind. Header naming Never used some header file name with std. Sometimes, compiler could not find the std headers.!!! FileIO The simplest example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include &amp;lt;iostream&amp;gt;#include</description></item><item><title>C++ Notes: Basics</title><link>https://zqfang.github.io/2020-02-10-cpp-basics/</link><pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-02-10-cpp-basics/</guid><description>C++ Notes Just some C/C++ code snippets to keep in mind. C/C++ is tremendous complicated, but it&amp;rsquo;s still the most powerful programming language.
Table of Contents char to Int Pointer Pointer and Smart Pointer Array as Argument Operator that can&amp;rsquo;t be overloaded Object Instantization Object Relationship Virtual Function and Ploymorphism Friend Const Constexpr Extern and static Char to Int 1.</description></item><item><title>C++ Notes: Return Pointer or Reference</title><link>https://zqfang.github.io/2020-02-10-cpp-pointer/</link><pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-02-10-cpp-pointer/</guid><description>Explaination A pointer or reference could not be return if they point/refer to a local variable stored in stack inside a function (local variable stored in stack will be destoried automatically when return, and the pointer become wild)
Situations when a function could return pointer or reference
variable defined outside a function scope global variable local static variable local variable stored in heap ( new opterator, malloc()) Other process could not access the memory of variable stored in heap until it is released.</description></item><item><title>Graph</title><link>https://zqfang.github.io/2020-02-09-cs-graph/</link><pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-02-09-cs-graph/</guid><description><![CDATA[Graphs Some data structures to keep in my mind. BinaryHeap: Complete binary tree MaxHeap: Parent &gt; Both Children IndexMaxHeap MinHeap: Parent &lt; Both Children IndexMinHeap Priority queue (MaxHeap) BinarySearchTree Not always complete binary tree Value: leftChild &lt; Parent &lt; rightChild DenseGraph SparseGraph Code snippets are taken from Play with Algorithm]]></description></item><item><title>Binary tree</title><link>https://zqfang.github.io/2020-02-08-cs-binarytree/</link><pubDate>Sat, 08 Feb 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-02-08-cs-binarytree/</guid><description><![CDATA[Binary trees Difference Some data structures to keep in my mind. BinaryHeap: Complete binary tree MaxHeap: Parent &gt; Both Children IndexMaxHeap MinHeap: Parent &lt; Both Children IndexMinHeap Priority queue (MaxHeap) BinarySearchTree Not always complete binary tree Value: leftChild &lt; Parent &lt; rightChild DenseGraph SparseGraph Code snippets are taken from Play]]></description></item><item><title>Sort</title><link>https://zqfang.github.io/2020-02-08-cs-sort/</link><pubDate>Sat, 08 Feb 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-02-08-cs-sort/</guid><description>Sort algorithms Code snippets are taken from Play with Algorithm Some algorithm to keep in my mind. selectionSort insertionSort mergeSort quickSort two way three way heapSort 1. insertionSort 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 #include &amp;lt;iostream&amp;gt;#include</description></item><item><title>What is Big O</title><link>https://zqfang.github.io/2020-02-01-cs-algo/</link><pubDate>Sat, 01 Feb 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-02-01-cs-algo/</guid><description>What on earth is Big O? Time complexity and space complexity Time complexity O(f(n)): number of commands need to execute. proportional to f(n). 表示运行算法所需要执行的指令数，和f(n)成正。 严格来</description></item></channel></rss>