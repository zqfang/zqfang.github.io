<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>C++ - Tag - My Computational Genomic Playground</title><link>https://zqfang.github.io/tags/c++/</link><description>C++ - Tag - My Computational Genomic Playground</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 10 Feb 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://zqfang.github.io/tags/c++/" rel="self" type="application/rss+xml"/><item><title>C++ Notes: STL</title><link>https://zqfang.github.io/2020-02-10-cpp-stl/</link><pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-02-10-cpp-stl/</guid><description>Just some advanced C/C++ code snippets to keep in mind. Header naming Never used some header file name with std. Sometimes, compiler could not find the std headers.!!! FileIO The simplest example 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 #include &amp;lt;iostream&amp;gt;#include</description></item><item><title>C++ Notes: Basics</title><link>https://zqfang.github.io/2020-02-10-cpp-basics/</link><pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-02-10-cpp-basics/</guid><description>C++ Notes Just some C/C++ code snippets to keep in mind. C/C++ is tremendous complicated, but it&amp;rsquo;s still the most powerful programming language.
Table of Contents char to Int Pointer Pointer and Smart Pointer Array as Argument Operator that can&amp;rsquo;t be overloaded Object Instantization Object Relationship Virtual Function and Ploymorphism Friend Const Constexpr Extern and static Char to Int 1.</description></item><item><title>C++ Notes: Return Pointer or Reference</title><link>https://zqfang.github.io/2020-02-10-cpp-pointer/</link><pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-02-10-cpp-pointer/</guid><description>Explaination A pointer or reference could not be return if they point/refer to a local variable stored in stack inside a function (local variable stored in stack will be destoried automatically when return, and the pointer become wild)
Situations when a function could return pointer or reference
variable defined outside a function scope global variable local static variable local variable stored in heap ( new opterator, malloc()) Other process could not access the memory of variable stored in heap until it is released.</description></item><item><title>Graph</title><link>https://zqfang.github.io/2020-02-09-cs-graph/</link><pubDate>Sun, 09 Feb 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-02-09-cs-graph/</guid><description><![CDATA[Graphs Some data structures to keep in my mind. BinaryHeap: Complete binary tree MaxHeap: Parent &gt; Both Children IndexMaxHeap MinHeap: Parent &lt; Both Children IndexMinHeap Priority queue (MaxHeap) BinarySearchTree Not always complete binary tree Value: leftChild &lt; Parent &lt; rightChild DenseGraph SparseGraph Code snippets take from Play with Algorithm 1.]]></description></item><item><title>Binary tree</title><link>https://zqfang.github.io/2020-02-08-cs-binarytree/</link><pubDate>Sat, 08 Feb 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-02-08-cs-binarytree/</guid><description><![CDATA[Binary trees Difference Some data structures to keep in my mind. BinaryHeap: Complete binary tree MaxHeap: Parent &gt; Both Children IndexMaxHeap MinHeap: Parent &lt; Both Children IndexMinHeap Priority queue (MaxHeap) BinarySearchTree Not always complete binary tree Value: leftChild &lt; Parent &lt; rightChild DenseGraph SparseGraph Code snippets take from Play with]]></description></item><item><title>Sort</title><link>https://zqfang.github.io/2020-02-08-cs-sort/</link><pubDate>Sat, 08 Feb 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-02-08-cs-sort/</guid><description>Sort algorithms Code snippets are taken from Play with Algorithm Some algorithm to keep in my mind. selectionSort insertionSort mergeSort quickSort two way three way heapSort 1. insertionSort 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22</description></item><item><title>What is Big O</title><link>https://zqfang.github.io/2020-02-01-cs-algo/</link><pubDate>Sat, 01 Feb 2020 00:00:00 +0000</pubDate><author>Author</author><guid>https://zqfang.github.io/2020-02-01-cs-algo/</guid><description>What on earth is Big O? Time complexity and space complexity Time complexity O(f(n)): number of commands need to execute. proportional to f(n). 表示运行算法所需要执行的指令数，和f(n)成正。 严格来</description></item></channel></rss>